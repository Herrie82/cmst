/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -p agent_interface.h: agent/org.monkey_business_enterprises.agent.xml
 *
 * qdbusxml2cpp is Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef AGENT_INTERFACE_H_1388957079
#define AGENT_INTERFACE_H_1388957079

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface net.connman.Agent
 */
class NetConnmanAgentInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "net.connman.Agent"; }

public:
    NetConnmanAgentInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~NetConnmanAgentInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> Cancel()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("Cancel"), argumentList);
    }

    inline QDBusPendingReply<> Release()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("Release"), argumentList);
    }

    inline QDBusPendingReply<> ReportError(const QDBusObjectPath &in0, const QString &in1)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0) << QVariant::fromValue(in1);
        return asyncCallWithArgumentList(QLatin1String("ReportError"), argumentList);
    }

    inline QDBusPendingReply<> RequestBrowser(const QDBusObjectPath &in0, const QString &in1)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0) << QVariant::fromValue(in1);
        return asyncCallWithArgumentList(QLatin1String("RequestBrowser"), argumentList);
    }

    inline QDBusPendingReply<QVariantMap> RequestInput(const QDBusObjectPath &in0, const QVariantMap &in1)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(in0) << QVariant::fromValue(in1);
        return asyncCallWithArgumentList(QLatin1String("RequestInput"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

namespace net {
  namespace connman {
    typedef ::NetConnmanAgentInterface Agent;
  }
}
#endif
