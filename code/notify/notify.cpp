
/**************************** notify.cpp ******************************** 

Code for a notify client to interface with a desktop notification 
server.

Copyright (C) 2013-2014
by: Andrew J. Bibb
License: MIT 

Permission is hereby granted, free of charge, to any person obtaining a copy 
of this software and associated documentation files (the "Software"),to deal 
in the Software without restriction, including without limitation the rights 
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell 
copies of the Software, and to permit persons to whom the Software is 
furnished to do so, subject to the following conditions: 

The above copyright notice and this permission notice shall be included 
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING 
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
DEALINGS IN THE SOFTWARE.
***********************************************************************/  

# include <QtCore/QDebug>
# include <QtDBus/QDBusConnection>
#	include "./code/notify/notify.h"


//	header files generated by qmake from the xml file created by qdbuscpp2xml
# include "notify_adaptor.h"
# include "notify_interface.h"

//	constructor
NotifyClient::NotifyClient(QObject* parent)
    : QObject(parent)
{	
	
	
	//	Create Adaptor and register this NotifyClient on the system bus.  
	new NotificationsAdaptor(this);
	QDBusConnection::sessionBus().registerObject("/org/monkeybusiness/NotifyClient", this);
	QDBusConnection::sessionBus().registerService("org.monkeybusiness.NotifyClient");

	//	Create an Interface for the NotifyClient
	org::freedesktop::Notifications* iface;
	iface = new org::freedesktop::Notifications(QString("org.freedesktop.Notifications"), QString("/org/freedesktop/Notifications"), QDBusConnection::sessionBus(), this);

	// data members
	s_name.clear();
	s_vendor.clear();
	s_version.clear();
	s_spec_version.clear();
	sl_capabilities.clear();
	
	
	
	qDebug() << "notify created";


	this->GetServerInformation(s_name, s_vendor, s_version, s_spec_version);
	
	
}


/////////////////////////////////////// PUBLIC FUNCTIONS ////////////////////////////////

/////////////////////////////////////// PUBLIC Q_SLOTS////////////////////////////////
//
//	Function to force a close ofthe notification
void NotifyClient::CloseNotifications(quint32 id)
{
	qDebug() << "inside closeNotifications" << id;

	return;
}

//
//	Function to get information about the server
void NotifyClient::GetServerInformation (QString name, QString vendor, QString version, QString spec_version)
{
	qDebug() << "Server Information";
	qDebug() << name << vendor << version << spec_version;
	
	return;
}

//
//	Function to get the server capabilities
//QStringList ::GetCapabilities();
//{
	//return;
//}
