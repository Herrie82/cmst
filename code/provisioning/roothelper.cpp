/**************************** roothelper.cpp ***************************

Code for the root helper registered on DBus.  When registered the CMST
provisioning editor will communicate to this object with signals.

Copyright (C) 2013-2014
by: Andrew J. Bibb
License: MIT 

Permission is hereby granted, free of charge, to any person obtaining a copy 
of this software and associated documentation files (the "Software"),to deal 
in the Software without restriction, including without limitation the rights 
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell 
copies of the Software, and to permit persons to whom the Software is 
furnished to do so, subject to the following conditions: 

The above copyright notice and this permission notice shall be included 
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE 
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING 
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
DEALINGS IN THE SOFTWARE.
***********************************************************************/  

# include <QtDBus/QDBusConnection>
# include <QtCore/QDebug>

#	include "./code/provisioning/roothelper.h"

//	header files generated by qmake from the xml file created by qdbuscpp2xml
# include "roothelper_adaptor.h"
# include "roothelper_interface.h"

//	constructor
RootHelper::RootHelper(QObject* parent)
    : QObject(parent)
{
	// Try to register a service on the system bus
	if (! QDBusConnection::systemBus().registerService("org.cmst.roothelper")) {
		qDebug() << tr("Failed to register service org.cmst.roothelper - there may be another instance running.");
		QCoreApplication::instance()->quit();
	}
	
	// try to register an object on the system bus
	if (! QDBusConnection::systemBus().registerObject("/", this)) {
		qDebug() << tr("Failed to register roothelper object on the system bus.");
		QCoreApplication::instance()->quit();
	}

	return;
}  
		
///////////////////// Public Slots /////////////////////////////////////
//
// Slot to select the file to read
void RootHelper::selectFile()
{
	qDebug() << "inside select file";

	return;
}

////////////////////// Private Functions ///////////////////////////////
//
// Function to authenticate this process.  Return true if authorized
bool RootHelper::authenticate()
{
	return true;
}
